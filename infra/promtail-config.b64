server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml  # Track file positions for all logs

clients:
  - url: http://loki:3100/loki/api/v1/push  # Send logs to Loki

scrape_configs:
  - job_name: docker
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: /var/lib/docker/containers/*/*-json.log
    pipeline_stages:
      - docker: {}  # Automatically discovers Docker containers
      - json:
          expressions:
            app_name: app_name  # Extract `app_name` from JSON logs
            timestamp: timestamp
            level: level
            message: message
      - drop:
          # Drop logs where the `app_name` field is missing or empty
          source: app_name
          expression: "^$"  # Drop logs with an empty `app_name`
      - labels:
          app_name: app_name  # Label logs with `app_name` if present
          level: level  # Label logs with `level` if present




      
