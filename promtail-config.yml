server:
  http_listen_port: 9080
  grpc_listen_port: 0

clients:
  - url: http://loki:3100/loki/api/v1/push

positions:
  filename: /tmp/positions.yaml  # Persist the positions file

# Docker Service Discovery to obtain container metadata
scrape_configs:
  - job_name: 'docker-discovery'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock  # This connects to Docker socket for service discovery
    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp  # Use the timestamp field in your logs
            message: message      # Ensure "message" is captured correctly
      - docker: {}
    relabel_configs:
      - source_labels: [__meta_docker_container_id]
        target_label: container_id

      - source_labels: [__meta_docker_container_name]
        target_label: container_name

      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        target_label: service_name

# File-based scraping with static_configs to read logs
  - job_name: 'docker-logs'
    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          __path__: "/var/lib/docker/containers/*/*-json.log"  # Path to all container logs

    pipeline_stages:
      - json:
          expressions:
            timestamp: timestamp  # Use the timestamp field in your logs
            message: message      # Ensure "message" is captured correctly
      - docker: {}  # This stage ensures Docker log format is parsed correctly

    relabel_configs:
      # Extract container ID from the log file path
      - source_labels: [__path__]
        regex: '.*/containers/([a-f0-9]{64})/.*-json.log'
        target_label: container_id

      # Dynamically fetch the container name based on the container ID from Docker discovery
      - source_labels: [container_id]
        action: replace
        target_label: container_name
        replacement: "$1"
