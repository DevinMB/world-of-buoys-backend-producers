server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml  # Track file positions for all containers

clients:
  - url: http://loki:3100/loki/api/v1/push  # Push logs to Loki

scrape_configs:
  - job_name: 'docker-logs'
    docker_sd_configs:
      - host: unix:///var/run/docker.sock  # Docker service discovery using socket
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        regex: '.*'
        target_label: container_name
      - source_labels: [__meta_docker_container_label_promtail_scrape]
        regex: 'true'
        action: keep  # Only scrape containers with the label 'promtail.scrape=true'
    pipeline_stages:
      - json:
          expressions:
            level: level
            app_name: app_name
    static_configs:
      - targets:
          - localhost
        labels:
          job: 'python-app'
          __path__: /logs/app.log  # This looks for /data/app.log in each container
